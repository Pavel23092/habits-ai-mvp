document.addEventListener('DOMContentLoaded', async () => {
    // --- 1. –í–ê–®–ò –ö–õ–Æ–ß–ò SUPABASE ---
    // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ—á–∫–∏ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API –≤ Supabase
    const SUPABASE_URL = 'https://exfcofrrcbnutfbaiclh.supabase.co'; // –í–ê–® URL
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV4ZmNvZnJyY2JudXRmYmFpY2xoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE3MjI2OTMsImV4cCI6MjA2NzI5ODY5M30.0g9uNsjiMCN7-O7rbYwL8pqhBnzIXQwfsNyJvrcn5ek'; // –í–ê–® –ö–õ–Æ–ß

    // --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ---
    const supabase = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    const tg = window.Telegram.WebApp;
    tg.expand();

    // --- 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const userId = tg.initDataUnsafe?.user?.id || `test_user_${Math.random()}`; 
    let dbData = {
        habits: [
            { id: 'h1', icon: 'üíß', text: '–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã' },
            { id: 'h2', icon: '‚úçÔ∏è', text: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∑–∞–¥–∞—á—É' },
            { id: 'h3', icon: 'üìñ', text: '–ß–∏—Ç–∞—Ç—å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É' }
        ],
        progress: {},
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const habitListEl = document.getElementById('habit-list');
    const progressBarEl = document.getElementById('progress-bar');
    const progressLabelEl = document.getElementById('progress-label');

    // --- 4. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
    function renderMainScreen() {
        habitListEl.innerHTML = '';
        const todayStr = new Date().toISOString().split('T')[0];
        const todayProgress = dbData.progress[todayStr] || [];

        dbData.habits.forEach(habit => {
            const isDone = todayProgress.includes(habit.id);
            const li = document.createElement('li');
            li.className = `habit-item ${isDone ? 'done' : ''}`;
            li.dataset.id = habit.id;
            li.innerHTML = `<div class="icon">${habit.icon}</div><div class="text">${habit.text}</div><div class="checkbox"></div>`;
            habitListEl.appendChild(li);
        });
        updateProgressBar();
    }
    
    function updateProgressBar() {
        const todayStr = new Date().toISOString().split('T')[0];
        const todayProgress = dbData.progress[todayStr] || [];
        const totalHabits = dbData.habits.length;
        const doneHabits = todayProgress.length;
        
        const percentage = totalHabits > 0 ? (doneHabits / totalHabits) * 100 : 0;
        progressBarEl.style.width = `${percentage}%`;
        progressLabelEl.textContent = `–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${doneHabits} –∏–∑ ${totalHabits}`;
    }

    // --- 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—ã—á–µ–∫ ---
    habitListEl.addEventListener('click', async (event) => {
        const habitItem = event.target.closest('.habit-item');
        if (!userId || !habitItem || habitItem.classList.contains('done')) return;
        
        tg.HapticFeedback.notificationOccurred('success');
        const habitId = habitItem.dataset.id;
        const todayStr = new Date().toISOString().split('T')[0];

        if (!dbData.progress[todayStr]) {
            dbData.progress[todayStr] = [];
        }
        dbData.progress[todayStr].push(habitId);
        
        habitItem.classList.add('done');
        updateProgressBar();
        
        const { error } = await supabase
            .from('users')
            .upsert({ id: userId, data: dbData });
        
        if (error) console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:", error);
    });

    // --- 6. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    async function main() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫, –ø–æ–∫–∞ –∏–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π
        document.getElementById('loader').style.display = 'flex';

        const { data, error } = await supabase
            .from('users')
            .select('data')
            .eq('id', userId)
            .single();

        if (data && data.data) {
            dbData = { ...dbData, ...data.data };
        } else if (error && error.code !== 'PGRST116') { // PGRST116 - —ç—Ç–æ "—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            console.error(error);
            document.getElementById('loader').innerHTML = "<p>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>";
            return;
        }
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        document.getElementById('loader').style.display = 'none';
        document.getElementById('main-app').style.display = 'flex';
        renderMainScreen();
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ!
    main();
});
