document.addEventListener('DOMContentLoaded', function() {
    
    // --- –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–∞—à–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ---
    const onboardingFlow = document.getElementById('onboarding-flow');
    const mainApp = document.getElementById('main-app');
    const mainScreen = document.getElementById('main-screen');
    const progressScreen = document.getElementById('progress-screen');
    const successOverlay = document.getElementById('success-overlay');

    // --- –ë–ê–ó–ê –î–ê–ù–ù–´–• (–Ω–∞ localStorage) ---
    let db = {
        onboardingCompleted: false,
        progress: {}, // –ü—Ä–∏–º–µ—Ä: { '2024-07-04': true }
        streaks: { current: 0, best: 0 },
        registrationDate: null
    };

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å "–ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö" ---
    function loadDB() {
        const savedDB = localStorage.getItem('habitsAIDB');
        if (savedDB) {
            db = JSON.parse(savedDB);
        }
    }

    function saveDB() {
        localStorage.setItem('habitsAIDB', JSON.stringify(db));
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        const screenToShow = document.getElementById(screenId);
        if (screenToShow) {
            screenToShow.classList.add('active');
        }
    }

    function showFlow(flowId) {
        document.querySelectorAll('.flow-container').forEach(f => f.classList.remove('active'));
        const flowToShow = document.getElementById(flowId);
        if (flowToShow) {
            flowToShow.classList.add('active');
        }
    }

    // --- –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º) ---
    function renderProgress() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–µ—Ä–∏–π
        document.querySelector('.streaks-container .streak-item:nth-child(1) h3').textContent = `${db.streaks.current} üî•`;
        document.querySelector('.streaks-container .streak-item:nth-child(2) h3').textContent = `${db.streaks.best} üèÜ`;

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const calendarContainer = document.querySelector('.calendar-container');
        calendarContainer.innerHTML = ''; 

        const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
        const today = new Date();
        const month = today.getMonth();
        const year = today.getFullYear();

        const header = document.createElement('h3');
        header.textContent = `${monthNames[month]} ${year}`;
        calendarContainer.appendChild(header);

        const daysGrid = document.createElement('div');
        daysGrid.className = 'days-grid';
        
        const weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        weekdays.forEach(day => {
            const dayEl = document.createElement('div');
            dayEl.className = 'day-name';
            dayEl.textContent = day;
            daysGrid.appendChild(dayEl);
        });
        
        const firstDayOfMonth = new Date(year, month, 1).getDay();
        const emptyDays = (firstDayOfMonth === 0) ? 6 : firstDayOfMonth - 1;

        for (let i = 0; i < emptyDays; i++) {
            daysGrid.appendChild(document.createElement('div'));
        }
      
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        for (let i = 1; i <= daysInMonth; i++) {
            const dayEl = document.createElement('div');
            dayEl.className = 'day-cell';
            dayEl.textContent = i;
            
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
            if (db.progress[dateStr]) {
                dayEl.classList.add('done');
            }
            if (i === today.getDate()) {
                dayEl.classList.add('today');
            }
            daysGrid.appendChild(dayEl);
        }
        
        calendarContainer.appendChild(daysGrid);
    }
    
    // --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –ù–ê–ñ–ê–¢–ò–ô ---
    document.body.addEventListener('click', function(event) {
        const button = event.target;
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É
        if (button.dataset.next && button.closest('#onboarding-flow')) {
            showScreen(button.dataset.next);
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        if (button.id === 'finish-onboarding-button') {
            db.onboardingCompleted = true;
            db.registrationDate = new Date().toISOString().split('T')[0];
            saveDB();
            showFlow('main-app');
            showScreen('main-screen');
        }

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        if (button.closest('[data-next="progress-screen"]')) {
            renderProgress();
            showScreen('progress-screen');
        }
        
        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å —ç–∫—Ä–∞–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (button.closest('[data-next="main-screen"]')) {
            showScreen('main-screen');
        }

        // --- –í–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–°–î–ï–õ–ê–õ!" ---
        if (button.classList.contains('success-button')) {
            const today = new Date().toISOString().split('T')[0];
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
            if (db.progress[today]) return; 

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            db.progress[today] = true;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
            const yesterday = new Date(Date.now() - 86400000).toISOString().split('T')[0];
            if (db.progress[yesterday]) {
                db.streaks.current += 1;
            } else {
                db.streaks.current = 1;
            }
            
            if (db.streaks.current > db.streaks.best) {
                db.streaks.best = db.streaks.current;
            }
            // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
if (button.id === 'reset-button') {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ
    const isConfirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?');
    if (isConfirmed) {
        localStorage.removeItem('habitsAIDB'); // –£–¥–∞–ª—è–µ–º –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    }
}
            
            saveDB();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–±–µ–¥—ã
            successOverlay.classList.add('active');

            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Å–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            setTimeout(() => {
                successOverlay.classList.remove('active');
                renderProgress();
                showScreen('progress-screen');
            }, 2000);
        }
    });

    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ü–†–ò –ó–ê–ü–£–°–ö–ï ---
    loadDB();
    if (db.onboardingCompleted) {
        showFlow('main-app');
        showScreen('main-screen');
    } else {
        showFlow('onboarding-flow');
        showScreen('welcome-screen');
    }
});
